"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/useAITeacher.js":
/*!***********************************!*\
  !*** ./src/hooks/useAITeacher.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   teachers: function() { return /* binding */ teachers; },\n/* harmony export */   useAITeacher: function() { return /* binding */ useAITeacher; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n\nconst teachers = [\n    \"Nanami\",\n    \"Naoki\"\n];\nconst useAITeacher = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)((set, get)=>({\n        messages: [],\n        currentMessage: null,\n        teacher: teachers[0],\n        language: \"English\",\n        classroom: \"default\",\n        speech: \"formal\",\n        loading: false,\n        lessonData: null,\n        userInteracted: false,\n        setTeacher: (teacher)=>{\n            set(()=>({}));\n            set(()=>({\n                    teacher,\n                    messages: get().messages.map((message)=>({\n                            ...message,\n                            audioPlayer: null\n                        }))\n                }));\n        },\n        setLanguage: (language)=>{\n            set(()=>({\n                    language\n                }));\n        },\n        setlessonData: (lessonData)=>{\n            set(()=>({\n                    lessonData\n                }));\n            get().loadLessonContent(lessonData);\n        },\n        setSpeech: (speech)=>{\n            set(()=>({\n                    speech\n                }));\n        },\n        markUserInteracted: ()=>{\n            set(()=>({\n                    userInteracted: true\n                }));\n        },\n        loadLessonContent: async (lessonData)=>{\n            var _lessonData_match;\n            const language = lessonData.replace(/-.*/, \"\");\n            const lesson = (_lessonData_match = lessonData.match(/-(\\d+)$/)) === null || _lessonData_match === void 0 ? void 0 : _lessonData_match[1];\n            console.log(\"Language:\", language, \"Lesson:\", lesson);\n            try {\n                const textPath = \"/assest/\".concat(language, \"/text/\").concat(lesson, \".txt\");\n                const textRes = await fetch(textPath);\n                const textContent = await textRes.text();\n                const message = {\n                    id: get().messages.length,\n                    question: \"Playing lesson: \".concat(lessonData),\n                    answer: {\n                        ReplyForUser: textContent\n                    },\n                    audioPlayer\n                };\n                set((state)=>({\n                        messages: [\n                            ...state.messages,\n                            message\n                        ],\n                        currentMessage: message\n                    }));\n                get().playMessage(message);\n            } catch (error) {\n                console.error(\"Error loading lesson content for \".concat(lessonData, \":\"), error);\n            }\n        },\n        askAI: async (question)=>{\n            if (!question) return;\n            const { speech, messages, lessonData } = get();\n            set(()=>({\n                    loading: true\n                }));\n            if (lessonData) {\n                get().loadLessonContent(lessonData);\n            } else {\n                try {\n                    const res = await fetch(\"/api/ai?question=\".concat(encodeURIComponent(question)));\n                    const data = await res.json();\n                    const message = {\n                        question,\n                        answer: data.result,\n                        id: messages.length,\n                        speech\n                    };\n                    set((state)=>({\n                            currentMessage: message,\n                            messages: [\n                                ...state.messages,\n                                message\n                            ],\n                            loading: false\n                        }));\n                    get().playMessage(message);\n                } catch (error) {\n                    console.error(\"Error fetching AI response:\", error);\n                    set(()=>({\n                            loading: false\n                        }));\n                }\n            }\n        },\n        playMessage: async (message)=>{\n            set(()=>({\n                    currentMessage: message\n                }));\n            if (!get().userInteracted) {\n                console.warn(\"Audio playback is blocked until user interaction.\");\n                return; // Exit if no user interaction\n            }\n            if (message.audioPlayer && message.audioPlayer.paused) {\n                message.audioPlayer.play();\n                return;\n            }\n            const { lessonData, language } = get();\n            if (lessonData) {\n                // Load lesson-specific content\n                try {\n                    var _lessonData_match;\n                    const audioPath = \"/assets/\".concat(language, \"/audio/\").concat((_lessonData_match = lessonData.match(/-(\\d+)$/)) === null || _lessonData_match === void 0 ? void 0 : _lessonData_match[1], \".mp3\");\n                    const audioRes = await fetch(audioPath);\n                    const audioBlob = await audioRes.blob();\n                    const audioUrl = URL.createObjectURL(audioBlob);\n                    const audioPlayer1 = new Audio(audioUrl);\n                    audioPlayer1.onended = ()=>{\n                        set(()=>({\n                                currentMessage: null\n                            }));\n                    };\n                    message.audioPlayer = audioPlayer1;\n                    audioPlayer1.currentTime = 0;\n                    audioPlayer1.play();\n                    // Update state with new audio player\n                    set(()=>({\n                            messages: get().messages.map((m)=>m.id === message.id ? message : m)\n                        }));\n                } catch (error) {\n                    console.error(\"Error playing lesson audio for \".concat(lessonData, \":\"), error);\n                }\n            } else {\n                // Generate audio dynamically for AI-generated messages\n                set(()=>({\n                        loading: true\n                    }));\n                try {\n                    const audioRes = await fetch(\"/api/tts?teacher=\".concat(get().teacher, \"&text=\").concat(encodeURIComponent(message.answer.ReplyForUser), \"&language=\").concat(get().language));\n                    const audioBlob = await audioRes.blob();\n                    const audioUrl = URL.createObjectURL(audioBlob);\n                    const audioPlayer1 = new Audio(audioUrl);\n                    // Extract visemes for additional features\n                    const visemes = await extractVisemesFromAudio(audioBlob);\n                    message.visemes = visemes;\n                    message.audioPlayer = audioPlayer1;\n                    audioPlayer1.onended = ()=>{\n                        set(()=>({\n                                currentMessage: null\n                            }));\n                    };\n                    set(()=>({\n                            messages: get().messages.map((m)=>m.id === message.id ? message : m),\n                            loading: false\n                        }));\n                    audioPlayer1.currentTime = 0;\n                    audioPlayer1.play();\n                } catch (error) {\n                    console.error(\"Error in playMessage:\", error);\n                    set(()=>({\n                            loading: false\n                        }));\n                }\n            }\n        },\n        stopMessage: (message)=>{\n            if (message.audioPlayer) {\n                message.audioPlayer.pause();\n                message.audioPlayer.currentTime = 0; // Reset audio to the start\n            }\n            set(()=>({\n                    currentMessage: null\n                }));\n        }\n    }));\nconst extractVisemesFromAudio = async (audioBlob)=>{\n    return new Promise((resolve)=>{\n        const mockVisemes = [\n            {\n                time: 0.0,\n                viseme: \"a\"\n            },\n            {\n                time: 0.5,\n                viseme: \"e\"\n            },\n            {\n                time: 1.0,\n                viseme: \"o\"\n            }\n        ];\n        resolve(mockVisemes); // Return mock data for now\n    });\n};\n// Add a listener to track user interaction\nif (true) {\n    window.addEventListener(\"click\", ()=>useAITeacher.getState().markUserInteracted(), {\n        once: true\n    });\n    window.addEventListener(\"keydown\", ()=>useAITeacher.getState().markUserInteracted(), {\n        once: true\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useAITeacher.js\n"));

/***/ })

});