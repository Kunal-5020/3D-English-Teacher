"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-speech-recognition";
exports.ids = ["vendor-chunks/react-speech-recognition"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.isNative = void 0;\nvar NativeSpeechRecognition =  false && (0);\nvar isNative = function isNative(SpeechRecognition) {\n    return SpeechRecognition === NativeSpeechRecognition;\n};\nexports.isNative = isNative;\nvar _default = NativeSpeechRecognition;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9OYXRpdmVTcGVlY2hSZWNvZ25pdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUdBLGdCQUFnQixHQUFHLEtBQUs7QUFDN0MsSUFBSUcsMEJBQTBCLE1BQWtCLElBQWdCQyxDQUFBQSxDQUFvSjtBQUVwTixJQUFJRixXQUFXLFNBQVNBLFNBQVNHLGlCQUFpQjtJQUNoRCxPQUFPQSxzQkFBc0JGO0FBQy9CO0FBRUFILGdCQUFnQixHQUFHRTtBQUNuQixJQUFJUSxXQUFXUDtBQUNmSCxrQkFBa0IsR0FBR1UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8zRC1BSS1FbmdsaXNoLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwZWVjaC1yZWNvZ25pdGlvbi9saWIvTmF0aXZlU3BlZWNoUmVjb2duaXRpb24uanM/YjJiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXhwb3J0cy5pc05hdGl2ZSA9IHZvaWQgMDtcbnZhciBOYXRpdmVTcGVlY2hSZWNvZ25pdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICh3aW5kb3cuU3BlZWNoUmVjb2duaXRpb24gfHwgd2luZG93LndlYmtpdFNwZWVjaFJlY29nbml0aW9uIHx8IHdpbmRvdy5tb3pTcGVlY2hSZWNvZ25pdGlvbiB8fCB3aW5kb3cubXNTcGVlY2hSZWNvZ25pdGlvbiB8fCB3aW5kb3cub1NwZWVjaFJlY29nbml0aW9uKTtcblxudmFyIGlzTmF0aXZlID0gZnVuY3Rpb24gaXNOYXRpdmUoU3BlZWNoUmVjb2duaXRpb24pIHtcbiAgcmV0dXJuIFNwZWVjaFJlY29nbml0aW9uID09PSBOYXRpdmVTcGVlY2hSZWNvZ25pdGlvbjtcbn07XG5cbmV4cG9ydHMuaXNOYXRpdmUgPSBpc05hdGl2ZTtcbnZhciBfZGVmYXVsdCA9IE5hdGl2ZVNwZWVjaFJlY29nbml0aW9uO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc05hdGl2ZSIsIk5hdGl2ZVNwZWVjaFJlY29nbml0aW9uIiwid2luZG93IiwiU3BlZWNoUmVjb2duaXRpb24iLCJ3ZWJraXRTcGVlY2hSZWNvZ25pdGlvbiIsIm1velNwZWVjaFJlY29nbml0aW9uIiwibXNTcGVlY2hSZWNvZ25pdGlvbiIsIm9TcGVlY2hSZWNvZ25pdGlvbiIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/RecognitionManager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/RecognitionManager.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _isAndroid = _interopRequireDefault(__webpack_require__(/*! ./isAndroid */ \"(ssr)/./node_modules/react-speech-recognition/lib/isAndroid.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-speech-recognition/lib/utils.js\");\nvar _NativeSpeechRecognition = __webpack_require__(/*! ./NativeSpeechRecognition */ \"(ssr)/./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nvar RecognitionManager = /*#__PURE__*/ function() {\n    function RecognitionManager(SpeechRecognition) {\n        _classCallCheck(this, RecognitionManager);\n        this.recognition = null;\n        this.pauseAfterDisconnect = false;\n        this.interimTranscript = \"\";\n        this.finalTranscript = \"\";\n        this.listening = false;\n        this.isMicrophoneAvailable = true;\n        this.subscribers = {};\n        this.onStopListening = function() {};\n        this.previousResultWasFinalOnly = false;\n        this.resetTranscript = this.resetTranscript.bind(this);\n        this.startListening = this.startListening.bind(this);\n        this.stopListening = this.stopListening.bind(this);\n        this.abortListening = this.abortListening.bind(this);\n        this.setSpeechRecognition = this.setSpeechRecognition.bind(this);\n        this.disableRecognition = this.disableRecognition.bind(this);\n        this.setSpeechRecognition(SpeechRecognition);\n        if ((0, _isAndroid[\"default\"])()) {\n            this.updateFinalTranscript = (0, _utils.debounce)(this.updateFinalTranscript, 250, true);\n        }\n    }\n    _createClass(RecognitionManager, [\n        {\n            key: \"setSpeechRecognition\",\n            value: function setSpeechRecognition(SpeechRecognition) {\n                var browserSupportsRecogniser = !!SpeechRecognition && ((0, _NativeSpeechRecognition.isNative)(SpeechRecognition) || (0, _utils.browserSupportsPolyfills)());\n                if (browserSupportsRecogniser) {\n                    this.disableRecognition();\n                    this.recognition = new SpeechRecognition();\n                    this.recognition.continuous = false;\n                    this.recognition.interimResults = true;\n                    this.recognition.onresult = this.updateTranscript.bind(this);\n                    this.recognition.onend = this.onRecognitionDisconnect.bind(this);\n                    this.recognition.onerror = this.onError.bind(this);\n                }\n                this.emitBrowserSupportsSpeechRecognitionChange(browserSupportsRecogniser);\n            }\n        },\n        {\n            key: \"subscribe\",\n            value: function subscribe(id, callbacks) {\n                this.subscribers[id] = callbacks;\n            }\n        },\n        {\n            key: \"unsubscribe\",\n            value: function unsubscribe(id) {\n                delete this.subscribers[id];\n            }\n        },\n        {\n            key: \"emitListeningChange\",\n            value: function emitListeningChange(listening) {\n                var _this = this;\n                this.listening = listening;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var onListeningChange = _this.subscribers[id].onListeningChange;\n                    onListeningChange(listening);\n                });\n            }\n        },\n        {\n            key: \"emitMicrophoneAvailabilityChange\",\n            value: function emitMicrophoneAvailabilityChange(isMicrophoneAvailable) {\n                var _this2 = this;\n                this.isMicrophoneAvailable = isMicrophoneAvailable;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var onMicrophoneAvailabilityChange = _this2.subscribers[id].onMicrophoneAvailabilityChange;\n                    onMicrophoneAvailabilityChange(isMicrophoneAvailable);\n                });\n            }\n        },\n        {\n            key: \"emitTranscriptChange\",\n            value: function emitTranscriptChange(interimTranscript, finalTranscript) {\n                var _this3 = this;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var onTranscriptChange = _this3.subscribers[id].onTranscriptChange;\n                    onTranscriptChange(interimTranscript, finalTranscript);\n                });\n            }\n        },\n        {\n            key: \"emitClearTranscript\",\n            value: function emitClearTranscript() {\n                var _this4 = this;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var onClearTranscript = _this4.subscribers[id].onClearTranscript;\n                    onClearTranscript();\n                });\n            }\n        },\n        {\n            key: \"emitBrowserSupportsSpeechRecognitionChange\",\n            value: function emitBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange) {\n                var _this5 = this;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var _this5$subscribers$id = _this5.subscribers[id], onBrowserSupportsSpeechRecognitionChange = _this5$subscribers$id.onBrowserSupportsSpeechRecognitionChange, onBrowserSupportsContinuousListeningChange = _this5$subscribers$id.onBrowserSupportsContinuousListeningChange;\n                    onBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange);\n                    onBrowserSupportsContinuousListeningChange(browserSupportsSpeechRecognitionChange);\n                });\n            }\n        },\n        {\n            key: \"disconnect\",\n            value: function disconnect(disconnectType) {\n                if (this.recognition && this.listening) {\n                    switch(disconnectType){\n                        case \"ABORT\":\n                            this.pauseAfterDisconnect = true;\n                            this.abort();\n                            break;\n                        case \"RESET\":\n                            this.pauseAfterDisconnect = false;\n                            this.abort();\n                            break;\n                        case \"STOP\":\n                        default:\n                            this.pauseAfterDisconnect = true;\n                            this.stop();\n                    }\n                }\n            }\n        },\n        {\n            key: \"disableRecognition\",\n            value: function disableRecognition() {\n                if (this.recognition) {\n                    this.recognition.onresult = function() {};\n                    this.recognition.onend = function() {};\n                    this.recognition.onerror = function() {};\n                    if (this.listening) {\n                        this.stopListening();\n                    }\n                }\n            }\n        },\n        {\n            key: \"onError\",\n            value: function onError(event) {\n                if (event && event.error && event.error === \"not-allowed\") {\n                    this.emitMicrophoneAvailabilityChange(false);\n                    this.disableRecognition();\n                }\n            }\n        },\n        {\n            key: \"onRecognitionDisconnect\",\n            value: function onRecognitionDisconnect() {\n                this.onStopListening();\n                this.listening = false;\n                if (this.pauseAfterDisconnect) {\n                    this.emitListeningChange(false);\n                } else if (this.recognition) {\n                    if (this.recognition.continuous) {\n                        this.startListening({\n                            continuous: this.recognition.continuous\n                        });\n                    } else {\n                        this.emitListeningChange(false);\n                    }\n                }\n                this.pauseAfterDisconnect = false;\n            }\n        },\n        {\n            key: \"updateTranscript\",\n            value: function updateTranscript(_ref) {\n                var results = _ref.results, resultIndex = _ref.resultIndex;\n                var currentIndex = resultIndex === undefined ? results.length - 1 : resultIndex;\n                this.interimTranscript = \"\";\n                this.finalTranscript = \"\";\n                for(var i = currentIndex; i < results.length; ++i){\n                    if (results[i].isFinal && (!(0, _isAndroid[\"default\"])() || results[i][0].confidence > 0)) {\n                        this.updateFinalTranscript(results[i][0].transcript);\n                    } else {\n                        this.interimTranscript = (0, _utils.concatTranscripts)(this.interimTranscript, results[i][0].transcript);\n                    }\n                }\n                var isDuplicateResult = false;\n                if (this.interimTranscript === \"\" && this.finalTranscript !== \"\") {\n                    if (this.previousResultWasFinalOnly) {\n                        isDuplicateResult = true;\n                    }\n                    this.previousResultWasFinalOnly = true;\n                } else {\n                    this.previousResultWasFinalOnly = false;\n                }\n                if (!isDuplicateResult) {\n                    this.emitTranscriptChange(this.interimTranscript, this.finalTranscript);\n                }\n            }\n        },\n        {\n            key: \"updateFinalTranscript\",\n            value: function updateFinalTranscript(newFinalTranscript) {\n                this.finalTranscript = (0, _utils.concatTranscripts)(this.finalTranscript, newFinalTranscript);\n            }\n        },\n        {\n            key: \"resetTranscript\",\n            value: function resetTranscript() {\n                this.disconnect(\"RESET\");\n            }\n        },\n        {\n            key: \"startListening\",\n            value: function() {\n                var _startListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee() {\n                    var _ref2, _ref2$continuous, continuous, language, isContinuousChanged, isLanguageChanged, _args = arguments;\n                    return regeneratorRuntime.wrap(function _callee$(_context) {\n                        while(1){\n                            switch(_context.prev = _context.next){\n                                case 0:\n                                    _ref2 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref2$continuous = _ref2.continuous, continuous = _ref2$continuous === void 0 ? false : _ref2$continuous, language = _ref2.language;\n                                    if (this.recognition) {\n                                        _context.next = 3;\n                                        break;\n                                    }\n                                    return _context.abrupt(\"return\");\n                                case 3:\n                                    isContinuousChanged = continuous !== this.recognition.continuous;\n                                    isLanguageChanged = language && language !== this.recognition.lang;\n                                    if (!(isContinuousChanged || isLanguageChanged)) {\n                                        _context.next = 11;\n                                        break;\n                                    }\n                                    if (!this.listening) {\n                                        _context.next = 9;\n                                        break;\n                                    }\n                                    _context.next = 9;\n                                    return this.stopListening();\n                                case 9:\n                                    this.recognition.continuous = isContinuousChanged ? continuous : this.recognition.continuous;\n                                    this.recognition.lang = isLanguageChanged ? language : this.recognition.lang;\n                                case 11:\n                                    if (this.listening) {\n                                        _context.next = 22;\n                                        break;\n                                    }\n                                    if (!this.recognition.continuous) {\n                                        this.resetTranscript();\n                                        this.emitClearTranscript();\n                                    }\n                                    _context.prev = 13;\n                                    _context.next = 16;\n                                    return this.start();\n                                case 16:\n                                    this.emitListeningChange(true);\n                                    _context.next = 22;\n                                    break;\n                                case 19:\n                                    _context.prev = 19;\n                                    _context.t0 = _context[\"catch\"](13);\n                                    // DOMExceptions indicate a redundant microphone start - safe to swallow\n                                    if (!(_context.t0 instanceof DOMException)) {\n                                        this.emitMicrophoneAvailabilityChange(false);\n                                    }\n                                case 22:\n                                case \"end\":\n                                    return _context.stop();\n                            }\n                        }\n                    }, _callee, this, [\n                        [\n                            13,\n                            19\n                        ]\n                    ]);\n                }));\n                function startListening() {\n                    return _startListening.apply(this, arguments);\n                }\n                return startListening;\n            }()\n        },\n        {\n            key: \"abortListening\",\n            value: function() {\n                var _abortListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee2() {\n                    var _this6 = this;\n                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while(1){\n                            switch(_context2.prev = _context2.next){\n                                case 0:\n                                    this.disconnect(\"ABORT\");\n                                    this.emitListeningChange(false);\n                                    _context2.next = 4;\n                                    return new Promise(function(resolve) {\n                                        _this6.onStopListening = resolve;\n                                    });\n                                case 4:\n                                case \"end\":\n                                    return _context2.stop();\n                            }\n                        }\n                    }, _callee2, this);\n                }));\n                function abortListening() {\n                    return _abortListening.apply(this, arguments);\n                }\n                return abortListening;\n            }()\n        },\n        {\n            key: \"stopListening\",\n            value: function() {\n                var _stopListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee3() {\n                    var _this7 = this;\n                    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while(1){\n                            switch(_context3.prev = _context3.next){\n                                case 0:\n                                    this.disconnect(\"STOP\");\n                                    this.emitListeningChange(false);\n                                    _context3.next = 4;\n                                    return new Promise(function(resolve) {\n                                        _this7.onStopListening = resolve;\n                                    });\n                                case 4:\n                                case \"end\":\n                                    return _context3.stop();\n                            }\n                        }\n                    }, _callee3, this);\n                }));\n                function stopListening() {\n                    return _stopListening.apply(this, arguments);\n                }\n                return stopListening;\n            }()\n        },\n        {\n            key: \"getRecognition\",\n            value: function getRecognition() {\n                return this.recognition;\n            }\n        },\n        {\n            key: \"start\",\n            value: function() {\n                var _start = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee4() {\n                    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                        while(1){\n                            switch(_context4.prev = _context4.next){\n                                case 0:\n                                    if (!(this.recognition && !this.listening)) {\n                                        _context4.next = 4;\n                                        break;\n                                    }\n                                    _context4.next = 3;\n                                    return this.recognition.start();\n                                case 3:\n                                    this.listening = true;\n                                case 4:\n                                case \"end\":\n                                    return _context4.stop();\n                            }\n                        }\n                    }, _callee4, this);\n                }));\n                function start() {\n                    return _start.apply(this, arguments);\n                }\n                return start;\n            }()\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                if (this.recognition && this.listening) {\n                    this.recognition.stop();\n                    this.listening = false;\n                }\n            }\n        },\n        {\n            key: \"abort\",\n            value: function abort() {\n                if (this.recognition && this.listening) {\n                    this.recognition.abort();\n                    this.listening = false;\n                }\n            }\n        }\n    ]);\n    return RecognitionManager;\n}();\nexports[\"default\"] = RecognitionManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9SZWNvZ25pdGlvbk1hbmFnZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUUsYUFBYUMsdUJBQXVCQyxtQkFBT0EsQ0FBQyxtRkFBYTtBQUU3RCxJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQywyRUFBUztBQUU5QixJQUFJRSwyQkFBMkJGLG1CQUFPQSxDQUFDLCtHQUEyQjtBQUVsRSxTQUFTRCx1QkFBdUJJLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQUc7QUFFaEcsU0FBU0UsbUJBQW1CQyxHQUFHLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxHQUFHO0lBQUksSUFBSTtRQUFFLElBQUlDLE9BQU9QLEdBQUcsQ0FBQ0ssSUFBSSxDQUFDQztRQUFNLElBQUlmLFFBQVFnQixLQUFLaEIsS0FBSztJQUFFLEVBQUUsT0FBT2lCLE9BQU87UUFBRU4sT0FBT007UUFBUTtJQUFRO0lBQUUsSUFBSUQsS0FBS0UsSUFBSSxFQUFFO1FBQUVSLFFBQVFWO0lBQVEsT0FBTztRQUFFbUIsUUFBUVQsT0FBTyxDQUFDVixPQUFPb0IsSUFBSSxDQUFDUixPQUFPQztJQUFTO0FBQUU7QUFFeFEsU0FBU1Esa0JBQWtCQyxFQUFFO0lBQUksT0FBTztRQUFjLElBQUlDLE9BQU8sSUFBSSxFQUFFQyxPQUFPQztRQUFXLE9BQU8sSUFBSU4sUUFBUSxTQUFVVCxPQUFPLEVBQUVDLE1BQU07WUFBSSxJQUFJRixNQUFNYSxHQUFHSSxLQUFLLENBQUNILE1BQU1DO1lBQU8sU0FBU1osTUFBTVosS0FBSztnQkFBSVEsbUJBQW1CQyxLQUFLQyxTQUFTQyxR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dEMsS0FBSztZQUNMZCxPQUFPLFNBQVN1RztnQkFDZCxJQUFJLElBQUksQ0FBQ3ZELFdBQVcsSUFBSSxJQUFJLENBQUNJLFNBQVMsRUFBRTtvQkFDdEMsSUFBSSxDQUFDSixXQUFXLENBQUN1RCxLQUFLO29CQUN0QixJQUFJLENBQUNuRCxTQUFTLEdBQUc7Z0JBQ25CO1lBQ0Y7UUFDRjtLQUFFO0lBRUYsT0FBT047QUFDVDtBQUVBL0Msa0JBQWtCLEdBQUcrQyIsInNvdXJjZXMiOlsid2VicGFjazovLzNELUFJLUVuZ2xpc2gvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9SZWNvZ25pdGlvbk1hbmFnZXIuanM/ZjA1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2lzQW5kcm9pZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNBbmRyb2lkXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG52YXIgX05hdGl2ZVNwZWVjaFJlY29nbml0aW9uID0gcmVxdWlyZShcIi4vTmF0aXZlU3BlZWNoUmVjb2duaXRpb25cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBSZWNvZ25pdGlvbk1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWNvZ25pdGlvbk1hbmFnZXIoU3BlZWNoUmVjb2duaXRpb24pIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVjb2duaXRpb25NYW5hZ2VyKTtcblxuICAgIHRoaXMucmVjb2duaXRpb24gPSBudWxsO1xuICAgIHRoaXMucGF1c2VBZnRlckRpc2Nvbm5lY3QgPSBmYWxzZTtcbiAgICB0aGlzLmludGVyaW1UcmFuc2NyaXB0ID0gJyc7XG4gICAgdGhpcy5maW5hbFRyYW5zY3JpcHQgPSAnJztcbiAgICB0aGlzLmxpc3RlbmluZyA9IGZhbHNlO1xuICAgIHRoaXMuaXNNaWNyb3Bob25lQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnN1YnNjcmliZXJzID0ge307XG5cbiAgICB0aGlzLm9uU3RvcExpc3RlbmluZyA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgdGhpcy5wcmV2aW91c1Jlc3VsdFdhc0ZpbmFsT25seSA9IGZhbHNlO1xuICAgIHRoaXMucmVzZXRUcmFuc2NyaXB0ID0gdGhpcy5yZXNldFRyYW5zY3JpcHQuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXJ0TGlzdGVuaW5nID0gdGhpcy5zdGFydExpc3RlbmluZy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RvcExpc3RlbmluZyA9IHRoaXMuc3RvcExpc3RlbmluZy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYWJvcnRMaXN0ZW5pbmcgPSB0aGlzLmFib3J0TGlzdGVuaW5nLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZXRTcGVlY2hSZWNvZ25pdGlvbiA9IHRoaXMuc2V0U3BlZWNoUmVjb2duaXRpb24uYmluZCh0aGlzKTtcbiAgICB0aGlzLmRpc2FibGVSZWNvZ25pdGlvbiA9IHRoaXMuZGlzYWJsZVJlY29nbml0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZXRTcGVlY2hSZWNvZ25pdGlvbihTcGVlY2hSZWNvZ25pdGlvbik7XG5cbiAgICBpZiAoKDAsIF9pc0FuZHJvaWRbXCJkZWZhdWx0XCJdKSgpKSB7XG4gICAgICB0aGlzLnVwZGF0ZUZpbmFsVHJhbnNjcmlwdCA9ICgwLCBfdXRpbHMuZGVib3VuY2UpKHRoaXMudXBkYXRlRmluYWxUcmFuc2NyaXB0LCAyNTAsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZWNvZ25pdGlvbk1hbmFnZXIsIFt7XG4gICAga2V5OiBcInNldFNwZWVjaFJlY29nbml0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNwZWVjaFJlY29nbml0aW9uKFNwZWVjaFJlY29nbml0aW9uKSB7XG4gICAgICB2YXIgYnJvd3NlclN1cHBvcnRzUmVjb2duaXNlciA9ICEhU3BlZWNoUmVjb2duaXRpb24gJiYgKCgwLCBfTmF0aXZlU3BlZWNoUmVjb2duaXRpb24uaXNOYXRpdmUpKFNwZWVjaFJlY29nbml0aW9uKSB8fCAoMCwgX3V0aWxzLmJyb3dzZXJTdXBwb3J0c1BvbHlmaWxscykoKSk7XG5cbiAgICAgIGlmIChicm93c2VyU3VwcG9ydHNSZWNvZ25pc2VyKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZVJlY29nbml0aW9uKCk7XG4gICAgICAgIHRoaXMucmVjb2duaXRpb24gPSBuZXcgU3BlZWNoUmVjb2duaXRpb24oKTtcbiAgICAgICAgdGhpcy5yZWNvZ25pdGlvbi5jb250aW51b3VzID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVjb2duaXRpb24uaW50ZXJpbVJlc3VsdHMgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlY29nbml0aW9uLm9ucmVzdWx0ID0gdGhpcy51cGRhdGVUcmFuc2NyaXB0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVjb2duaXRpb24ub25lbmQgPSB0aGlzLm9uUmVjb2duaXRpb25EaXNjb25uZWN0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVjb2duaXRpb24ub25lcnJvciA9IHRoaXMub25FcnJvci5iaW5kKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVtaXRCcm93c2VyU3VwcG9ydHNTcGVlY2hSZWNvZ25pdGlvbkNoYW5nZShicm93c2VyU3VwcG9ydHNSZWNvZ25pc2VyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3Vic2NyaWJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN1YnNjcmliZShpZCwgY2FsbGJhY2tzKSB7XG4gICAgICB0aGlzLnN1YnNjcmliZXJzW2lkXSA9IGNhbGxiYWNrcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidW5zdWJzY3JpYmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoaWQpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLnN1YnNjcmliZXJzW2lkXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZW1pdExpc3RlbmluZ0NoYW5nZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbWl0TGlzdGVuaW5nQ2hhbmdlKGxpc3RlbmluZykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5saXN0ZW5pbmcgPSBsaXN0ZW5pbmc7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnN1YnNjcmliZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgb25MaXN0ZW5pbmdDaGFuZ2UgPSBfdGhpcy5zdWJzY3JpYmVyc1tpZF0ub25MaXN0ZW5pbmdDaGFuZ2U7XG4gICAgICAgIG9uTGlzdGVuaW5nQ2hhbmdlKGxpc3RlbmluZyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZW1pdE1pY3JvcGhvbmVBdmFpbGFiaWxpdHlDaGFuZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW1pdE1pY3JvcGhvbmVBdmFpbGFiaWxpdHlDaGFuZ2UoaXNNaWNyb3Bob25lQXZhaWxhYmxlKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5pc01pY3JvcGhvbmVBdmFpbGFibGUgPSBpc01pY3JvcGhvbmVBdmFpbGFibGU7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnN1YnNjcmliZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgb25NaWNyb3Bob25lQXZhaWxhYmlsaXR5Q2hhbmdlID0gX3RoaXMyLnN1YnNjcmliZXJzW2lkXS5vbk1pY3JvcGhvbmVBdmFpbGFiaWxpdHlDaGFuZ2U7XG4gICAgICAgIG9uTWljcm9waG9uZUF2YWlsYWJpbGl0eUNoYW5nZShpc01pY3JvcGhvbmVBdmFpbGFibGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImVtaXRUcmFuc2NyaXB0Q2hhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXRUcmFuc2NyaXB0Q2hhbmdlKGludGVyaW1UcmFuc2NyaXB0LCBmaW5hbFRyYW5zY3JpcHQpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnN1YnNjcmliZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgb25UcmFuc2NyaXB0Q2hhbmdlID0gX3RoaXMzLnN1YnNjcmliZXJzW2lkXS5vblRyYW5zY3JpcHRDaGFuZ2U7XG4gICAgICAgIG9uVHJhbnNjcmlwdENoYW5nZShpbnRlcmltVHJhbnNjcmlwdCwgZmluYWxUcmFuc2NyaXB0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlbWl0Q2xlYXJUcmFuc2NyaXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXRDbGVhclRyYW5zY3JpcHQoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgT2JqZWN0LmtleXModGhpcy5zdWJzY3JpYmVycykuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIG9uQ2xlYXJUcmFuc2NyaXB0ID0gX3RoaXM0LnN1YnNjcmliZXJzW2lkXS5vbkNsZWFyVHJhbnNjcmlwdDtcbiAgICAgICAgb25DbGVhclRyYW5zY3JpcHQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlbWl0QnJvd3NlclN1cHBvcnRzU3BlZWNoUmVjb2duaXRpb25DaGFuZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW1pdEJyb3dzZXJTdXBwb3J0c1NwZWVjaFJlY29nbml0aW9uQ2hhbmdlKGJyb3dzZXJTdXBwb3J0c1NwZWVjaFJlY29nbml0aW9uQ2hhbmdlKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgT2JqZWN0LmtleXModGhpcy5zdWJzY3JpYmVycykuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIF90aGlzNSRzdWJzY3JpYmVycyRpZCA9IF90aGlzNS5zdWJzY3JpYmVyc1tpZF0sXG4gICAgICAgICAgICBvbkJyb3dzZXJTdXBwb3J0c1NwZWVjaFJlY29nbml0aW9uQ2hhbmdlID0gX3RoaXM1JHN1YnNjcmliZXJzJGlkLm9uQnJvd3NlclN1cHBvcnRzU3BlZWNoUmVjb2duaXRpb25DaGFuZ2UsXG4gICAgICAgICAgICBvbkJyb3dzZXJTdXBwb3J0c0NvbnRpbnVvdXNMaXN0ZW5pbmdDaGFuZ2UgPSBfdGhpczUkc3Vic2NyaWJlcnMkaWQub25Ccm93c2VyU3VwcG9ydHNDb250aW51b3VzTGlzdGVuaW5nQ2hhbmdlO1xuICAgICAgICBvbkJyb3dzZXJTdXBwb3J0c1NwZWVjaFJlY29nbml0aW9uQ2hhbmdlKGJyb3dzZXJTdXBwb3J0c1NwZWVjaFJlY29nbml0aW9uQ2hhbmdlKTtcbiAgICAgICAgb25Ccm93c2VyU3VwcG9ydHNDb250aW51b3VzTGlzdGVuaW5nQ2hhbmdlKGJyb3dzZXJTdXBwb3J0c1NwZWVjaFJlY29nbml0aW9uQ2hhbmdlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkaXNjb25uZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoZGlzY29ubmVjdFR5cGUpIHtcbiAgICAgIGlmICh0aGlzLnJlY29nbml0aW9uICYmIHRoaXMubGlzdGVuaW5nKSB7XG4gICAgICAgIHN3aXRjaCAoZGlzY29ubmVjdFR5cGUpIHtcbiAgICAgICAgICBjYXNlICdBQk9SVCc6XG4gICAgICAgICAgICB0aGlzLnBhdXNlQWZ0ZXJEaXNjb25uZWN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuYWJvcnQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnUkVTRVQnOlxuICAgICAgICAgICAgdGhpcy5wYXVzZUFmdGVyRGlzY29ubmVjdCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5hYm9ydCgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdTVE9QJzpcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhpcy5wYXVzZUFmdGVyRGlzY29ubmVjdCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkaXNhYmxlUmVjb2duaXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZVJlY29nbml0aW9uKCkge1xuICAgICAgaWYgKHRoaXMucmVjb2duaXRpb24pIHtcbiAgICAgICAgdGhpcy5yZWNvZ25pdGlvbi5vbnJlc3VsdCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgICAgIHRoaXMucmVjb2duaXRpb24ub25lbmQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgICAgICB0aGlzLnJlY29nbml0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgICAgICBpZiAodGhpcy5saXN0ZW5pbmcpIHtcbiAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbkVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uRXJyb3IoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCAmJiBldmVudC5lcnJvciAmJiBldmVudC5lcnJvciA9PT0gJ25vdC1hbGxvd2VkJykge1xuICAgICAgICB0aGlzLmVtaXRNaWNyb3Bob25lQXZhaWxhYmlsaXR5Q2hhbmdlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlUmVjb2duaXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25SZWNvZ25pdGlvbkRpc2Nvbm5lY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25SZWNvZ25pdGlvbkRpc2Nvbm5lY3QoKSB7XG4gICAgICB0aGlzLm9uU3RvcExpc3RlbmluZygpO1xuICAgICAgdGhpcy5saXN0ZW5pbmcgPSBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMucGF1c2VBZnRlckRpc2Nvbm5lY3QpIHtcbiAgICAgICAgdGhpcy5lbWl0TGlzdGVuaW5nQ2hhbmdlKGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5yZWNvZ25pdGlvbikge1xuICAgICAgICBpZiAodGhpcy5yZWNvZ25pdGlvbi5jb250aW51b3VzKSB7XG4gICAgICAgICAgdGhpcy5zdGFydExpc3RlbmluZyh7XG4gICAgICAgICAgICBjb250aW51b3VzOiB0aGlzLnJlY29nbml0aW9uLmNvbnRpbnVvdXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmVtaXRMaXN0ZW5pbmdDaGFuZ2UoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMucGF1c2VBZnRlckRpc2Nvbm5lY3QgPSBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlVHJhbnNjcmlwdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVUcmFuc2NyaXB0KF9yZWYpIHtcbiAgICAgIHZhciByZXN1bHRzID0gX3JlZi5yZXN1bHRzLFxuICAgICAgICAgIHJlc3VsdEluZGV4ID0gX3JlZi5yZXN1bHRJbmRleDtcbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSByZXN1bHRJbmRleCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0cy5sZW5ndGggLSAxIDogcmVzdWx0SW5kZXg7XG4gICAgICB0aGlzLmludGVyaW1UcmFuc2NyaXB0ID0gJyc7XG4gICAgICB0aGlzLmZpbmFsVHJhbnNjcmlwdCA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpID0gY3VycmVudEluZGV4OyBpIDwgcmVzdWx0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAocmVzdWx0c1tpXS5pc0ZpbmFsICYmICghKDAsIF9pc0FuZHJvaWRbXCJkZWZhdWx0XCJdKSgpIHx8IHJlc3VsdHNbaV1bMF0uY29uZmlkZW5jZSA+IDApKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVGaW5hbFRyYW5zY3JpcHQocmVzdWx0c1tpXVswXS50cmFuc2NyaXB0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmludGVyaW1UcmFuc2NyaXB0ID0gKDAsIF91dGlscy5jb25jYXRUcmFuc2NyaXB0cykodGhpcy5pbnRlcmltVHJhbnNjcmlwdCwgcmVzdWx0c1tpXVswXS50cmFuc2NyaXB0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXNEdXBsaWNhdGVSZXN1bHQgPSBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMuaW50ZXJpbVRyYW5zY3JpcHQgPT09ICcnICYmIHRoaXMuZmluYWxUcmFuc2NyaXB0ICE9PSAnJykge1xuICAgICAgICBpZiAodGhpcy5wcmV2aW91c1Jlc3VsdFdhc0ZpbmFsT25seSkge1xuICAgICAgICAgIGlzRHVwbGljYXRlUmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHJldmlvdXNSZXN1bHRXYXNGaW5hbE9ubHkgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcmV2aW91c1Jlc3VsdFdhc0ZpbmFsT25seSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzRHVwbGljYXRlUmVzdWx0KSB7XG4gICAgICAgIHRoaXMuZW1pdFRyYW5zY3JpcHRDaGFuZ2UodGhpcy5pbnRlcmltVHJhbnNjcmlwdCwgdGhpcy5maW5hbFRyYW5zY3JpcHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVGaW5hbFRyYW5zY3JpcHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlRmluYWxUcmFuc2NyaXB0KG5ld0ZpbmFsVHJhbnNjcmlwdCkge1xuICAgICAgdGhpcy5maW5hbFRyYW5zY3JpcHQgPSAoMCwgX3V0aWxzLmNvbmNhdFRyYW5zY3JpcHRzKSh0aGlzLmZpbmFsVHJhbnNjcmlwdCwgbmV3RmluYWxUcmFuc2NyaXB0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRUcmFuc2NyaXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0VHJhbnNjcmlwdCgpIHtcbiAgICAgIHRoaXMuZGlzY29ubmVjdCgnUkVTRVQnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRMaXN0ZW5pbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9zdGFydExpc3RlbmluZyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHtcbiAgICAgICAgdmFyIF9yZWYyLFxuICAgICAgICAgICAgX3JlZjIkY29udGludW91cyxcbiAgICAgICAgICAgIGNvbnRpbnVvdXMsXG4gICAgICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgICAgIGlzQ29udGludW91c0NoYW5nZWQsXG4gICAgICAgICAgICBpc0xhbmd1YWdlQ2hhbmdlZCxcbiAgICAgICAgICAgIF9hcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBfcmVmMiA9IF9hcmdzLmxlbmd0aCA+IDAgJiYgX2FyZ3NbMF0gIT09IHVuZGVmaW5lZCA/IF9hcmdzWzBdIDoge30sIF9yZWYyJGNvbnRpbnVvdXMgPSBfcmVmMi5jb250aW51b3VzLCBjb250aW51b3VzID0gX3JlZjIkY29udGludW91cyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRjb250aW51b3VzLCBsYW5ndWFnZSA9IF9yZWYyLmxhbmd1YWdlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVjb2duaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiKTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaXNDb250aW51b3VzQ2hhbmdlZCA9IGNvbnRpbnVvdXMgIT09IHRoaXMucmVjb2duaXRpb24uY29udGludW91cztcbiAgICAgICAgICAgICAgICBpc0xhbmd1YWdlQ2hhbmdlZCA9IGxhbmd1YWdlICYmIGxhbmd1YWdlICE9PSB0aGlzLnJlY29nbml0aW9uLmxhbmc7XG5cbiAgICAgICAgICAgICAgICBpZiAoIShpc0NvbnRpbnVvdXNDaGFuZ2VkIHx8IGlzTGFuZ3VhZ2VDaGFuZ2VkKSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmxpc3RlbmluZykge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9wTGlzdGVuaW5nKCk7XG5cbiAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIHRoaXMucmVjb2duaXRpb24uY29udGludW91cyA9IGlzQ29udGludW91c0NoYW5nZWQgPyBjb250aW51b3VzIDogdGhpcy5yZWNvZ25pdGlvbi5jb250aW51b3VzO1xuICAgICAgICAgICAgICAgIHRoaXMucmVjb2duaXRpb24ubGFuZyA9IGlzTGFuZ3VhZ2VDaGFuZ2VkID8gbGFuZ3VhZ2UgOiB0aGlzLnJlY29nbml0aW9uLmxhbmc7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5saXN0ZW5pbmcpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5yZWNvZ25pdGlvbi5jb250aW51b3VzKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0VHJhbnNjcmlwdCgpO1xuICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0Q2xlYXJUcmFuc2NyaXB0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDEzO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNjtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydCgpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0TGlzdGVuaW5nQ2hhbmdlKHRydWUpO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0W1wiY2F0Y2hcIl0oMTMpO1xuXG4gICAgICAgICAgICAgICAgLy8gRE9NRXhjZXB0aW9ucyBpbmRpY2F0ZSBhIHJlZHVuZGFudCBtaWNyb3Bob25lIHN0YXJ0IC0gc2FmZSB0byBzd2FsbG93XG4gICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQudDAgaW5zdGFuY2VvZiBET01FeGNlcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmVtaXRNaWNyb3Bob25lQXZhaWxhYmlsaXR5Q2hhbmdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzEzLCAxOV1dKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gc3RhcnRMaXN0ZW5pbmcoKSB7XG4gICAgICAgIHJldHVybiBfc3RhcnRMaXN0ZW5pbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXJ0TGlzdGVuaW5nO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiBcImFib3J0TGlzdGVuaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfYWJvcnRMaXN0ZW5pbmcgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkge1xuICAgICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCgnQUJPUlQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRMaXN0ZW5pbmdDaGFuZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzNi5vblN0b3BMaXN0ZW5pbmcgPSByZXNvbHZlO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiBhYm9ydExpc3RlbmluZygpIHtcbiAgICAgICAgcmV0dXJuIF9hYm9ydExpc3RlbmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWJvcnRMaXN0ZW5pbmc7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcExpc3RlbmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3N0b3BMaXN0ZW5pbmcgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkge1xuICAgICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0Mykge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCgnU1RPUCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdExpc3RlbmluZ0NoYW5nZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0O1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgX3RoaXM3Lm9uU3RvcExpc3RlbmluZyA9IHJlc29sdmU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlMywgdGhpcyk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmcoKSB7XG4gICAgICAgIHJldHVybiBfc3RvcExpc3RlbmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RvcExpc3RlbmluZztcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogXCJnZXRSZWNvZ25pdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZWNvZ25pdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlY29nbml0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3N0YXJ0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnJlY29nbml0aW9uICYmICF0aGlzLmxpc3RlbmluZykpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWNvZ25pdGlvbi5zdGFydCgpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmluZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlNCwgdGhpcyk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICByZXR1cm4gX3N0YXJ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGFydDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogXCJzdG9wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICBpZiAodGhpcy5yZWNvZ25pdGlvbiAmJiB0aGlzLmxpc3RlbmluZykge1xuICAgICAgICB0aGlzLnJlY29nbml0aW9uLnN0b3AoKTtcbiAgICAgICAgdGhpcy5saXN0ZW5pbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWJvcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICBpZiAodGhpcy5yZWNvZ25pdGlvbiAmJiB0aGlzLmxpc3RlbmluZykge1xuICAgICAgICB0aGlzLnJlY29nbml0aW9uLmFib3J0KCk7XG4gICAgICAgIHRoaXMubGlzdGVuaW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlY29nbml0aW9uTWFuYWdlcjtcbn0oKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBSZWNvZ25pdGlvbk1hbmFnZXI7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2lzQW5kcm9pZCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3V0aWxzIiwiX05hdGl2ZVNwZWVjaFJlY29nbml0aW9uIiwib2JqIiwiX19lc01vZHVsZSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlc29sdmUiLCJyZWplY3QiLCJfbmV4dCIsIl90aHJvdyIsImtleSIsImFyZyIsImluZm8iLCJlcnJvciIsImRvbmUiLCJQcm9taXNlIiwidGhlbiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiZm4iLCJzZWxmIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwiZXJyIiwidW5kZWZpbmVkIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIlJlY29nbml0aW9uTWFuYWdlciIsIlNwZWVjaFJlY29nbml0aW9uIiwicmVjb2duaXRpb24iLCJwYXVzZUFmdGVyRGlzY29ubmVjdCIsImludGVyaW1UcmFuc2NyaXB0IiwiZmluYWxUcmFuc2NyaXB0IiwibGlzdGVuaW5nIiwiaXNNaWNyb3Bob25lQXZhaWxhYmxlIiwic3Vic2NyaWJlcnMiLCJvblN0b3BMaXN0ZW5pbmciLCJwcmV2aW91c1Jlc3VsdFdhc0ZpbmFsT25seSIsInJlc2V0VHJhbnNjcmlwdCIsImJpbmQiLCJzdGFydExpc3RlbmluZyIsInN0b3BMaXN0ZW5pbmciLCJhYm9ydExpc3RlbmluZyIsInNldFNwZWVjaFJlY29nbml0aW9uIiwiZGlzYWJsZVJlY29nbml0aW9uIiwidXBkYXRlRmluYWxUcmFuc2NyaXB0IiwiZGVib3VuY2UiLCJicm93c2VyU3VwcG9ydHNSZWNvZ25pc2VyIiwiaXNOYXRpdmUiLCJicm93c2VyU3VwcG9ydHNQb2x5ZmlsbHMiLCJjb250aW51b3VzIiwiaW50ZXJpbVJlc3VsdHMiLCJvbnJlc3VsdCIsInVwZGF0ZVRyYW5zY3JpcHQiLCJvbmVuZCIsIm9uUmVjb2duaXRpb25EaXNjb25uZWN0Iiwib25lcnJvciIsIm9uRXJyb3IiLCJlbWl0QnJvd3NlclN1cHBvcnRzU3BlZWNoUmVjb2duaXRpb25DaGFuZ2UiLCJzdWJzY3JpYmUiLCJpZCIsImNhbGxiYWNrcyIsInVuc3Vic2NyaWJlIiwiZW1pdExpc3RlbmluZ0NoYW5nZSIsIl90aGlzIiwia2V5cyIsImZvckVhY2giLCJvbkxpc3RlbmluZ0NoYW5nZSIsImVtaXRNaWNyb3Bob25lQXZhaWxhYmlsaXR5Q2hhbmdlIiwiX3RoaXMyIiwib25NaWNyb3Bob25lQXZhaWxhYmlsaXR5Q2hhbmdlIiwiZW1pdFRyYW5zY3JpcHRDaGFuZ2UiLCJfdGhpczMiLCJvblRyYW5zY3JpcHRDaGFuZ2UiLCJlbWl0Q2xlYXJUcmFuc2NyaXB0IiwiX3RoaXM0Iiwib25DbGVhclRyYW5zY3JpcHQiLCJicm93c2VyU3VwcG9ydHNTcGVlY2hSZWNvZ25pdGlvbkNoYW5nZSIsIl90aGlzNSIsIl90aGlzNSRzdWJzY3JpYmVycyRpZCIsIm9uQnJvd3NlclN1cHBvcnRzU3BlZWNoUmVjb2duaXRpb25DaGFuZ2UiLCJvbkJyb3dzZXJTdXBwb3J0c0NvbnRpbnVvdXNMaXN0ZW5pbmdDaGFuZ2UiLCJkaXNjb25uZWN0IiwiZGlzY29ubmVjdFR5cGUiLCJhYm9ydCIsInN0b3AiLCJldmVudCIsIl9yZWYiLCJyZXN1bHRzIiwicmVzdWx0SW5kZXgiLCJjdXJyZW50SW5kZXgiLCJpc0ZpbmFsIiwiY29uZmlkZW5jZSIsInRyYW5zY3JpcHQiLCJjb25jYXRUcmFuc2NyaXB0cyIsImlzRHVwbGljYXRlUmVzdWx0IiwibmV3RmluYWxUcmFuc2NyaXB0IiwiX3N0YXJ0TGlzdGVuaW5nIiwicmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUiLCJfcmVmMiIsIl9yZWYyJGNvbnRpbnVvdXMiLCJsYW5ndWFnZSIsImlzQ29udGludW91c0NoYW5nZWQiLCJpc0xhbmd1YWdlQ2hhbmdlZCIsIl9hcmdzIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsImFicnVwdCIsImxhbmciLCJzdGFydCIsInQwIiwiRE9NRXhjZXB0aW9uIiwiX2Fib3J0TGlzdGVuaW5nIiwiX2NhbGxlZTIiLCJfdGhpczYiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJfc3RvcExpc3RlbmluZyIsIl9jYWxsZWUzIiwiX3RoaXM3IiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwiZ2V0UmVjb2duaXRpb24iLCJfc3RhcnQiLCJfY2FsbGVlNCIsIl9jYWxsZWU0JCIsIl9jb250ZXh0NCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/RecognitionManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/SpeechRecognition.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/SpeechRecognition.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.useSpeechRecognition = void 0;\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-speech-recognition/lib/utils.js\");\nvar _actions = __webpack_require__(/*! ./actions */ \"(ssr)/./node_modules/react-speech-recognition/lib/actions.js\");\nvar _reducers = __webpack_require__(/*! ./reducers */ \"(ssr)/./node_modules/react-speech-recognition/lib/reducers.js\");\nvar _RecognitionManager = _interopRequireDefault(__webpack_require__(/*! ./RecognitionManager */ \"(ssr)/./node_modules/react-speech-recognition/lib/RecognitionManager.js\"));\nvar _isAndroid = _interopRequireDefault(__webpack_require__(/*! ./isAndroid */ \"(ssr)/./node_modules/react-speech-recognition/lib/isAndroid.js\"));\nvar _NativeSpeechRecognition = _interopRequireDefault(__webpack_require__(/*! ./NativeSpeechRecognition */ \"(ssr)/./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nvar _browserSupportsSpeechRecognition = !!_NativeSpeechRecognition[\"default\"];\nvar _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !(0, _isAndroid[\"default\"])();\nvar recognitionManager;\nvar useSpeechRecognition = function useSpeechRecognition() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$transcribing = _ref.transcribing, transcribing = _ref$transcribing === void 0 ? true : _ref$transcribing, _ref$clearTranscriptO = _ref.clearTranscriptOnListen, clearTranscriptOnListen = _ref$clearTranscriptO === void 0 ? true : _ref$clearTranscriptO, _ref$commands = _ref.commands, commands = _ref$commands === void 0 ? [] : _ref$commands;\n    var _useState = (0, _react.useState)(SpeechRecognition.getRecognitionManager()), _useState2 = _slicedToArray(_useState, 1), recognitionManager = _useState2[0];\n    var _useState3 = (0, _react.useState)(_browserSupportsSpeechRecognition), _useState4 = _slicedToArray(_useState3, 2), browserSupportsSpeechRecognition = _useState4[0], setBrowserSupportsSpeechRecognition = _useState4[1];\n    var _useState5 = (0, _react.useState)(_browserSupportsContinuousListening), _useState6 = _slicedToArray(_useState5, 2), browserSupportsContinuousListening = _useState6[0], setBrowserSupportsContinuousListening = _useState6[1];\n    var _useReducer = (0, _react.useReducer)(_reducers.transcriptReducer, {\n        interimTranscript: recognitionManager.interimTranscript,\n        finalTranscript: \"\"\n    }), _useReducer2 = _slicedToArray(_useReducer, 2), _useReducer2$ = _useReducer2[0], interimTranscript = _useReducer2$.interimTranscript, finalTranscript = _useReducer2$.finalTranscript, dispatch = _useReducer2[1];\n    var _useState7 = (0, _react.useState)(recognitionManager.listening), _useState8 = _slicedToArray(_useState7, 2), listening = _useState8[0], setListening = _useState8[1];\n    var _useState9 = (0, _react.useState)(recognitionManager.isMicrophoneAvailable), _useState10 = _slicedToArray(_useState9, 2), isMicrophoneAvailable = _useState10[0], setMicrophoneAvailable = _useState10[1];\n    var commandsRef = (0, _react.useRef)(commands);\n    commandsRef.current = commands;\n    var dispatchClearTranscript = function dispatchClearTranscript() {\n        dispatch((0, _actions.clearTranscript)());\n    };\n    var resetTranscript = (0, _react.useCallback)(function() {\n        recognitionManager.resetTranscript();\n        dispatchClearTranscript();\n    }, [\n        recognitionManager\n    ]);\n    var testFuzzyMatch = function testFuzzyMatch(command, input, fuzzyMatchingThreshold) {\n        var commandToString = _typeof(command) === \"object\" ? command.toString() : command;\n        var commandWithoutSpecials = commandToString.replace(/[&/\\\\#,+()!$~%.'\":*?<>{}]/g, \"\").replace(/  +/g, \" \").trim();\n        var howSimilar = (0, _utils.compareTwoStringsUsingDiceCoefficient)(commandWithoutSpecials, input);\n        if (howSimilar >= fuzzyMatchingThreshold) {\n            return {\n                command: command,\n                commandWithoutSpecials: commandWithoutSpecials,\n                howSimilar: howSimilar,\n                isFuzzyMatch: true\n            };\n        }\n        return null;\n    };\n    var testMatch = function testMatch(command, input) {\n        var pattern = (0, _utils.commandToRegExp)(command);\n        var result = pattern.exec(input);\n        if (result) {\n            return {\n                command: command,\n                parameters: result.slice(1)\n            };\n        }\n        return null;\n    };\n    var matchCommands = (0, _react.useCallback)(function(newInterimTranscript, newFinalTranscript) {\n        commandsRef.current.forEach(function(_ref2) {\n            var command = _ref2.command, callback = _ref2.callback, _ref2$matchInterim = _ref2.matchInterim, matchInterim = _ref2$matchInterim === void 0 ? false : _ref2$matchInterim, _ref2$isFuzzyMatch = _ref2.isFuzzyMatch, isFuzzyMatch = _ref2$isFuzzyMatch === void 0 ? false : _ref2$isFuzzyMatch, _ref2$fuzzyMatchingTh = _ref2.fuzzyMatchingThreshold, fuzzyMatchingThreshold = _ref2$fuzzyMatchingTh === void 0 ? 0.8 : _ref2$fuzzyMatchingTh, _ref2$bestMatchOnly = _ref2.bestMatchOnly, bestMatchOnly = _ref2$bestMatchOnly === void 0 ? false : _ref2$bestMatchOnly;\n            var input = !newFinalTranscript && matchInterim ? newInterimTranscript.trim() : newFinalTranscript.trim();\n            var subcommands = Array.isArray(command) ? command : [\n                command\n            ];\n            var results = subcommands.map(function(subcommand) {\n                if (isFuzzyMatch) {\n                    return testFuzzyMatch(subcommand, input, fuzzyMatchingThreshold);\n                }\n                return testMatch(subcommand, input);\n            }).filter(function(x) {\n                return x;\n            });\n            if (isFuzzyMatch && bestMatchOnly && results.length >= 2) {\n                results.sort(function(a, b) {\n                    return b.howSimilar - a.howSimilar;\n                });\n                var _results$ = results[0], _command = _results$.command, commandWithoutSpecials = _results$.commandWithoutSpecials, howSimilar = _results$.howSimilar;\n                callback(commandWithoutSpecials, input, howSimilar, {\n                    command: _command,\n                    resetTranscript: resetTranscript\n                });\n            } else {\n                results.forEach(function(result) {\n                    if (result.isFuzzyMatch) {\n                        var _command2 = result.command, _commandWithoutSpecials = result.commandWithoutSpecials, _howSimilar = result.howSimilar;\n                        callback(_commandWithoutSpecials, input, _howSimilar, {\n                            command: _command2,\n                            resetTranscript: resetTranscript\n                        });\n                    } else {\n                        var _command3 = result.command, parameters = result.parameters;\n                        callback.apply(void 0, _toConsumableArray(parameters).concat([\n                            {\n                                command: _command3,\n                                resetTranscript: resetTranscript\n                            }\n                        ]));\n                    }\n                });\n            }\n        });\n    }, [\n        resetTranscript\n    ]);\n    var handleTranscriptChange = (0, _react.useCallback)(function(newInterimTranscript, newFinalTranscript) {\n        if (transcribing) {\n            dispatch((0, _actions.appendTranscript)(newInterimTranscript, newFinalTranscript));\n        }\n        matchCommands(newInterimTranscript, newFinalTranscript);\n    }, [\n        matchCommands,\n        transcribing\n    ]);\n    var handleClearTranscript = (0, _react.useCallback)(function() {\n        if (clearTranscriptOnListen) {\n            dispatchClearTranscript();\n        }\n    }, [\n        clearTranscriptOnListen\n    ]);\n    (0, _react.useEffect)(function() {\n        var id = SpeechRecognition.counter;\n        SpeechRecognition.counter += 1;\n        var callbacks = {\n            onListeningChange: setListening,\n            onMicrophoneAvailabilityChange: setMicrophoneAvailable,\n            onTranscriptChange: handleTranscriptChange,\n            onClearTranscript: handleClearTranscript,\n            onBrowserSupportsSpeechRecognitionChange: setBrowserSupportsSpeechRecognition,\n            onBrowserSupportsContinuousListeningChange: setBrowserSupportsContinuousListening\n        };\n        recognitionManager.subscribe(id, callbacks);\n        return function() {\n            recognitionManager.unsubscribe(id);\n        };\n    }, [\n        transcribing,\n        clearTranscriptOnListen,\n        recognitionManager,\n        handleTranscriptChange,\n        handleClearTranscript\n    ]);\n    var transcript = (0, _utils.concatTranscripts)(finalTranscript, interimTranscript);\n    return {\n        transcript: transcript,\n        interimTranscript: interimTranscript,\n        finalTranscript: finalTranscript,\n        listening: listening,\n        isMicrophoneAvailable: isMicrophoneAvailable,\n        resetTranscript: resetTranscript,\n        browserSupportsSpeechRecognition: browserSupportsSpeechRecognition,\n        browserSupportsContinuousListening: browserSupportsContinuousListening\n    };\n};\nexports.useSpeechRecognition = useSpeechRecognition;\nvar SpeechRecognition = {\n    counter: 0,\n    applyPolyfill: function applyPolyfill(PolyfillSpeechRecognition) {\n        if (recognitionManager) {\n            recognitionManager.setSpeechRecognition(PolyfillSpeechRecognition);\n        } else {\n            recognitionManager = new _RecognitionManager[\"default\"](PolyfillSpeechRecognition);\n        }\n        var browserSupportsPolyfill = !!PolyfillSpeechRecognition && (0, _utils.browserSupportsPolyfills)();\n        _browserSupportsSpeechRecognition = browserSupportsPolyfill;\n        _browserSupportsContinuousListening = browserSupportsPolyfill;\n    },\n    removePolyfill: function removePolyfill() {\n        if (recognitionManager) {\n            recognitionManager.setSpeechRecognition(_NativeSpeechRecognition[\"default\"]);\n        } else {\n            recognitionManager = new _RecognitionManager[\"default\"](_NativeSpeechRecognition[\"default\"]);\n        }\n        _browserSupportsSpeechRecognition = !!_NativeSpeechRecognition[\"default\"];\n        _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !(0, _isAndroid[\"default\"])();\n    },\n    getRecognitionManager: function getRecognitionManager() {\n        if (!recognitionManager) {\n            recognitionManager = new _RecognitionManager[\"default\"](_NativeSpeechRecognition[\"default\"]);\n        }\n        return recognitionManager;\n    },\n    getRecognition: function getRecognition() {\n        var recognitionManager = SpeechRecognition.getRecognitionManager();\n        return recognitionManager.getRecognition();\n    },\n    startListening: function() {\n        var _startListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee() {\n            var _ref3, continuous, language, recognitionManager, _args = arguments;\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n                while(1){\n                    switch(_context.prev = _context.next){\n                        case 0:\n                            _ref3 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, continuous = _ref3.continuous, language = _ref3.language;\n                            recognitionManager = SpeechRecognition.getRecognitionManager();\n                            _context.next = 4;\n                            return recognitionManager.startListening({\n                                continuous: continuous,\n                                language: language\n                            });\n                        case 4:\n                        case \"end\":\n                            return _context.stop();\n                    }\n                }\n            }, _callee);\n        }));\n        function startListening() {\n            return _startListening.apply(this, arguments);\n        }\n        return startListening;\n    }(),\n    stopListening: function() {\n        var _stopListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee2() {\n            var recognitionManager;\n            return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while(1){\n                    switch(_context2.prev = _context2.next){\n                        case 0:\n                            recognitionManager = SpeechRecognition.getRecognitionManager();\n                            _context2.next = 3;\n                            return recognitionManager.stopListening();\n                        case 3:\n                        case \"end\":\n                            return _context2.stop();\n                    }\n                }\n            }, _callee2);\n        }));\n        function stopListening() {\n            return _stopListening.apply(this, arguments);\n        }\n        return stopListening;\n    }(),\n    abortListening: function() {\n        var _abortListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee3() {\n            var recognitionManager;\n            return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                while(1){\n                    switch(_context3.prev = _context3.next){\n                        case 0:\n                            recognitionManager = SpeechRecognition.getRecognitionManager();\n                            _context3.next = 3;\n                            return recognitionManager.abortListening();\n                        case 3:\n                        case \"end\":\n                            return _context3.stop();\n                    }\n                }\n            }, _callee3);\n        }));\n        function abortListening() {\n            return _abortListening.apply(this, arguments);\n        }\n        return abortListening;\n    }(),\n    browserSupportsSpeechRecognition: function browserSupportsSpeechRecognition() {\n        return _browserSupportsSpeechRecognition;\n    },\n    browserSupportsContinuousListening: function browserSupportsContinuousListening() {\n        return _browserSupportsContinuousListening;\n    }\n};\nvar _default = SpeechRecognition;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/SpeechRecognition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/actions.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/actions.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.appendTranscript = exports.clearTranscript = void 0;\nvar _constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/react-speech-recognition/lib/constants.js\");\nvar clearTranscript = function clearTranscript() {\n    return {\n        type: _constants.CLEAR_TRANSCRIPT\n    };\n};\nexports.clearTranscript = clearTranscript;\nvar appendTranscript = function appendTranscript(interimTranscript, finalTranscript) {\n    return {\n        type: _constants.APPEND_TRANSCRIPT,\n        payload: {\n            interimTranscript: interimTranscript,\n            finalTranscript: finalTranscript\n        }\n    };\n};\nexports.appendTranscript = appendTranscript;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9hY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCx3QkFBd0IsR0FBR0EsdUJBQXVCLEdBQUcsS0FBSztBQUUxRCxJQUFJSSxhQUFhQyxtQkFBT0EsQ0FBQyxtRkFBYTtBQUV0QyxJQUFJRixrQkFBa0IsU0FBU0E7SUFDN0IsT0FBTztRQUNMRyxNQUFNRixXQUFXRyxnQkFBZ0I7SUFDbkM7QUFDRjtBQUVBUCx1QkFBdUIsR0FBR0c7QUFFMUIsSUFBSUQsbUJBQW1CLFNBQVNBLGlCQUFpQk0saUJBQWlCLEVBQUVDLGVBQWU7SUFDakYsT0FBTztRQUNMSCxNQUFNRixXQUFXTSxpQkFBaUI7UUFDbENDLFNBQVM7WUFDUEgsbUJBQW1CQTtZQUNuQkMsaUJBQWlCQTtRQUNuQjtJQUNGO0FBQ0Y7QUFFQVQsd0JBQXdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vM0QtQUktRW5nbGlzaC8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL2FjdGlvbnMuanM/YWM3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYXBwZW5kVHJhbnNjcmlwdCA9IGV4cG9ydHMuY2xlYXJUcmFuc2NyaXB0ID0gdm9pZCAwO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcblxudmFyIGNsZWFyVHJhbnNjcmlwdCA9IGZ1bmN0aW9uIGNsZWFyVHJhbnNjcmlwdCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBfY29uc3RhbnRzLkNMRUFSX1RSQU5TQ1JJUFRcbiAgfTtcbn07XG5cbmV4cG9ydHMuY2xlYXJUcmFuc2NyaXB0ID0gY2xlYXJUcmFuc2NyaXB0O1xuXG52YXIgYXBwZW5kVHJhbnNjcmlwdCA9IGZ1bmN0aW9uIGFwcGVuZFRyYW5zY3JpcHQoaW50ZXJpbVRyYW5zY3JpcHQsIGZpbmFsVHJhbnNjcmlwdCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IF9jb25zdGFudHMuQVBQRU5EX1RSQU5TQ1JJUFQsXG4gICAgcGF5bG9hZDoge1xuICAgICAgaW50ZXJpbVRyYW5zY3JpcHQ6IGludGVyaW1UcmFuc2NyaXB0LFxuICAgICAgZmluYWxUcmFuc2NyaXB0OiBmaW5hbFRyYW5zY3JpcHRcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLmFwcGVuZFRyYW5zY3JpcHQgPSBhcHBlbmRUcmFuc2NyaXB0OyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImFwcGVuZFRyYW5zY3JpcHQiLCJjbGVhclRyYW5zY3JpcHQiLCJfY29uc3RhbnRzIiwicmVxdWlyZSIsInR5cGUiLCJDTEVBUl9UUkFOU0NSSVBUIiwiaW50ZXJpbVRyYW5zY3JpcHQiLCJmaW5hbFRyYW5zY3JpcHQiLCJBUFBFTkRfVFJBTlNDUklQVCIsInBheWxvYWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/actions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/constants.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/constants.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.APPEND_TRANSCRIPT = exports.CLEAR_TRANSCRIPT = void 0;\nvar CLEAR_TRANSCRIPT = \"CLEAR_TRANSCRIPT\";\nexports.CLEAR_TRANSCRIPT = CLEAR_TRANSCRIPT;\nvar APPEND_TRANSCRIPT = \"APPEND_TRANSCRIPT\";\nexports.APPEND_TRANSCRIPT = APPEND_TRANSCRIPT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHlCQUF5QixHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQzVELElBQUlHLG1CQUFtQjtBQUN2Qkgsd0JBQXdCLEdBQUdHO0FBQzNCLElBQUlELG9CQUFvQjtBQUN4QkYseUJBQXlCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vM0QtQUktRW5nbGlzaC8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL2NvbnN0YW50cy5qcz85ZjgxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5BUFBFTkRfVFJBTlNDUklQVCA9IGV4cG9ydHMuQ0xFQVJfVFJBTlNDUklQVCA9IHZvaWQgMDtcbnZhciBDTEVBUl9UUkFOU0NSSVBUID0gJ0NMRUFSX1RSQU5TQ1JJUFQnO1xuZXhwb3J0cy5DTEVBUl9UUkFOU0NSSVBUID0gQ0xFQVJfVFJBTlNDUklQVDtcbnZhciBBUFBFTkRfVFJBTlNDUklQVCA9ICdBUFBFTkRfVFJBTlNDUklQVCc7XG5leHBvcnRzLkFQUEVORF9UUkFOU0NSSVBUID0gQVBQRU5EX1RSQU5TQ1JJUFQ7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQVBQRU5EX1RSQU5TQ1JJUFQiLCJDTEVBUl9UUkFOU0NSSVBUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/index.js":
/*!************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"useSpeechRecognition\", ({\n    enumerable: true,\n    get: function get() {\n        return _SpeechRecognition.useSpeechRecognition;\n    }\n}));\nexports[\"default\"] = void 0;\nvar _SpeechRecognition = _interopRequireWildcard(__webpack_require__(/*! ./SpeechRecognition */ \"(ssr)/./node_modules/react-speech-recognition/lib/SpeechRecognition.js\"));\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nvar _default = _SpeechRecognition[\"default\"];\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLFNBQVNBLFFBQVFDLEdBQUc7SUFBSTtJQUEyQixJQUFJLE9BQU9DLFdBQVcsY0FBYyxPQUFPQSxPQUFPQyxRQUFRLEtBQUssVUFBVTtRQUFFSCxVQUFVLFNBQVNBLFFBQVFDLEdBQUc7WUFBSSxPQUFPLE9BQU9BO1FBQUs7SUFBRyxPQUFPO1FBQUVELFVBQVUsU0FBU0EsUUFBUUMsR0FBRztZQUFJLE9BQU9BLE9BQU8sT0FBT0MsV0FBVyxjQUFjRCxJQUFJRyxXQUFXLEtBQUtGLFVBQVVELFFBQVFDLE9BQU9HLFNBQVMsR0FBRyxXQUFXLE9BQU9KO1FBQUs7SUFBRztJQUFFLE9BQU9ELFFBQVFDO0FBQU07QUFFelhLLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGSCx3REFBdUQ7SUFDckRJLFlBQVk7SUFDWkMsS0FBSyxTQUFTQTtRQUNaLE9BQU9DLG1CQUFtQkMsb0JBQW9CO0lBQ2hEO0FBQ0YsQ0FBQyxFQUFDO0FBQ0ZMLGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUkscUJBQXFCRSx3QkFBd0JDLG1CQUFPQSxDQUFDLG1HQUFxQjtBQUU5RSxTQUFTQztJQUE2QixJQUFJLE9BQU9DLFlBQVksWUFBWSxPQUFPO0lBQU0sSUFBSUMsUUFBUSxJQUFJRDtJQUFXRCwyQkFBMkIsU0FBU0E7UUFBNkIsT0FBT0U7SUFBTztJQUFHLE9BQU9BO0FBQU87QUFFak4sU0FBU0osd0JBQXdCYixHQUFHO0lBQUksSUFBSUEsT0FBT0EsSUFBSWtCLFVBQVUsRUFBRTtRQUFFLE9BQU9sQjtJQUFLO0lBQUUsSUFBSUEsUUFBUSxRQUFRRCxRQUFRQyxTQUFTLFlBQVksT0FBT0EsUUFBUSxZQUFZO1FBQUUsT0FBTztZQUFFLFdBQVdBO1FBQUk7SUFBRztJQUFFLElBQUlpQixRQUFRRjtJQUE0QixJQUFJRSxTQUFTQSxNQUFNRSxHQUFHLENBQUNuQixNQUFNO1FBQUUsT0FBT2lCLE1BQU1QLEdBQUcsQ0FBQ1Y7SUFBTTtJQUFFLElBQUlvQixTQUFTLENBQUM7SUFBRyxJQUFJQyx3QkFBd0JoQixPQUFPQyxjQUFjLElBQUlELE9BQU9pQix3QkFBd0I7SUFBRSxJQUFLLElBQUlDLE9BQU92QixJQUFLO1FBQUUsSUFBSUssT0FBT0QsU0FBUyxDQUFDb0IsY0FBYyxDQUFDQyxJQUFJLENBQUN6QixLQUFLdUIsTUFBTTtZQUFFLElBQUlHLE9BQU9MLHdCQUF3QmhCLE9BQU9pQix3QkFBd0IsQ0FBQ3RCLEtBQUt1QixPQUFPO1lBQU0sSUFBSUcsUUFBU0EsQ0FBQUEsS0FBS2hCLEdBQUcsSUFBSWdCLEtBQUtDLEdBQUcsR0FBRztnQkFBRXRCLE9BQU9DLGNBQWMsQ0FBQ2MsUUFBUUcsS0FBS0c7WUFBTyxPQUFPO2dCQUFFTixNQUFNLENBQUNHLElBQUksR0FBR3ZCLEdBQUcsQ0FBQ3VCLElBQUk7WUFBRTtRQUFFO0lBQUU7SUFBRUgsTUFBTSxDQUFDLFVBQVUsR0FBR3BCO0lBQUssSUFBSWlCLE9BQU87UUFBRUEsTUFBTVUsR0FBRyxDQUFDM0IsS0FBS29CO0lBQVM7SUFBRSxPQUFPQTtBQUFRO0FBRTd1QixJQUFJUSxXQUFXakIsa0JBQWtCLENBQUMsVUFBVTtBQUM1Q0osa0JBQWtCLEdBQUdxQiIsInNvdXJjZXMiOlsid2VicGFjazovLzNELUFJLUVuZ2xpc2gvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9pbmRleC5qcz9mNWU3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2VTcGVlY2hSZWNvZ25pdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU3BlZWNoUmVjb2duaXRpb24udXNlU3BlZWNoUmVjb2duaXRpb247XG4gIH1cbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfU3BlZWNoUmVjb2duaXRpb24gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9TcGVlY2hSZWNvZ25pdGlvblwiKSk7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbnZhciBfZGVmYXVsdCA9IF9TcGVlY2hSZWNvZ25pdGlvbltcImRlZmF1bHRcIl07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6WyJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIl9TcGVlY2hSZWNvZ25pdGlvbiIsInVzZVNwZWVjaFJlY29nbml0aW9uIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwiX19lc01vZHVsZSIsImhhcyIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/isAndroid.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/isAndroid.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _default = function _default() {\n    return /(android)/i.test(typeof navigator !== \"undefined\" ? navigator.userAgent : \"\");\n};\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9pc0FuZHJvaWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUUsV0FBVyxTQUFTQTtJQUN0QixPQUFPLGFBQWFDLElBQUksQ0FBQyxPQUFPQyxjQUFjLGNBQWNBLFVBQVVDLFNBQVMsR0FBRztBQUNwRjtBQUVBTCxrQkFBa0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8zRC1BSS1FbmdsaXNoLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwZWVjaC1yZWNvZ25pdGlvbi9saWIvaXNBbmRyb2lkLmpzPzJlMjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gIHJldHVybiAvKGFuZHJvaWQpL2kudGVzdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyA/IG5hdmlnYXRvci51c2VyQWdlbnQgOiAnJyk7XG59O1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9kZWZhdWx0IiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/isAndroid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/reducers.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/reducers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.transcriptReducer = void 0;\nvar _constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/react-speech-recognition/lib/constants.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-speech-recognition/lib/utils.js\");\nvar transcriptReducer = function transcriptReducer(state, action) {\n    switch(action.type){\n        case _constants.CLEAR_TRANSCRIPT:\n            return {\n                interimTranscript: \"\",\n                finalTranscript: \"\"\n            };\n        case _constants.APPEND_TRANSCRIPT:\n            return {\n                interimTranscript: action.payload.interimTranscript,\n                finalTranscript: (0, _utils.concatTranscripts)(state.finalTranscript, action.payload.finalTranscript)\n            };\n        default:\n            throw new Error();\n    }\n};\nexports.transcriptReducer = transcriptReducer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9yZWR1Y2Vycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQseUJBQXlCLEdBQUcsS0FBSztBQUVqQyxJQUFJRyxhQUFhQyxtQkFBT0EsQ0FBQyxtRkFBYTtBQUV0QyxJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQywyRUFBUztBQUU5QixJQUFJRixvQkFBb0IsU0FBU0Esa0JBQWtCSSxLQUFLLEVBQUVDLE1BQU07SUFDOUQsT0FBUUEsT0FBT0MsSUFBSTtRQUNqQixLQUFLTCxXQUFXTSxnQkFBZ0I7WUFDOUIsT0FBTztnQkFDTEMsbUJBQW1CO2dCQUNuQkMsaUJBQWlCO1lBQ25CO1FBRUYsS0FBS1IsV0FBV1MsaUJBQWlCO1lBQy9CLE9BQU87Z0JBQ0xGLG1CQUFtQkgsT0FBT00sT0FBTyxDQUFDSCxpQkFBaUI7Z0JBQ25EQyxpQkFBaUIsQ0FBQyxHQUFHTixPQUFPUyxpQkFBaUIsRUFBRVIsTUFBTUssZUFBZSxFQUFFSixPQUFPTSxPQUFPLENBQUNGLGVBQWU7WUFDdEc7UUFFRjtZQUNFLE1BQU0sSUFBSUk7SUFDZDtBQUNGO0FBRUFmLHlCQUF5QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovLzNELUFJLUVuZ2xpc2gvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9yZWR1Y2Vycy5qcz8yZTc4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50cmFuc2NyaXB0UmVkdWNlciA9IHZvaWQgMDtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIHRyYW5zY3JpcHRSZWR1Y2VyID0gZnVuY3Rpb24gdHJhbnNjcmlwdFJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBfY29uc3RhbnRzLkNMRUFSX1RSQU5TQ1JJUFQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbnRlcmltVHJhbnNjcmlwdDogJycsXG4gICAgICAgIGZpbmFsVHJhbnNjcmlwdDogJydcbiAgICAgIH07XG5cbiAgICBjYXNlIF9jb25zdGFudHMuQVBQRU5EX1RSQU5TQ1JJUFQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbnRlcmltVHJhbnNjcmlwdDogYWN0aW9uLnBheWxvYWQuaW50ZXJpbVRyYW5zY3JpcHQsXG4gICAgICAgIGZpbmFsVHJhbnNjcmlwdDogKDAsIF91dGlscy5jb25jYXRUcmFuc2NyaXB0cykoc3RhdGUuZmluYWxUcmFuc2NyaXB0LCBhY3Rpb24ucGF5bG9hZC5maW5hbFRyYW5zY3JpcHQpXG4gICAgICB9O1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICB9XG59O1xuXG5leHBvcnRzLnRyYW5zY3JpcHRSZWR1Y2VyID0gdHJhbnNjcmlwdFJlZHVjZXI7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHJhbnNjcmlwdFJlZHVjZXIiLCJfY29uc3RhbnRzIiwicmVxdWlyZSIsIl91dGlscyIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSIsIkNMRUFSX1RSQU5TQ1JJUFQiLCJpbnRlcmltVHJhbnNjcmlwdCIsImZpbmFsVHJhbnNjcmlwdCIsIkFQUEVORF9UUkFOU0NSSVBUIiwicGF5bG9hZCIsImNvbmNhdFRyYW5zY3JpcHRzIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/reducers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/lib/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.browserSupportsPolyfills = exports.compareTwoStringsUsingDiceCoefficient = exports.commandToRegExp = exports.concatTranscripts = exports.debounce = void 0;\nvar debounce = function debounce(func, wait, immediate) {\n    var timeout;\n    return function() {\n        var context = this;\n        var args = arguments;\n        var later = function later() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n};\nexports.debounce = debounce;\nvar concatTranscripts = function concatTranscripts() {\n    for(var _len = arguments.length, transcriptParts = new Array(_len), _key = 0; _key < _len; _key++){\n        transcriptParts[_key] = arguments[_key];\n    }\n    return transcriptParts.map(function(t) {\n        return t.trim();\n    }).join(\" \").trim();\n}; // The command matching code is a modified version of Backbone.Router by Jeremy Ashkenas, under the MIT license.\nexports.concatTranscripts = concatTranscripts;\nvar optionalParam = /\\s*\\((.*?)\\)\\s*/g;\nvar optionalRegex = /(\\(\\?:[^)]+\\))\\?/g;\nvar namedParam = /(\\(\\?)?:\\w+/g;\nvar splatParam = /\\*/g;\nvar escapeRegExp = /[-{}[\\]+?.,\\\\^$|#]/g;\nvar commandToRegExp = function commandToRegExp(command) {\n    if (command instanceof RegExp) {\n        return new RegExp(command.source, \"i\");\n    }\n    command = command.replace(escapeRegExp, \"\\\\$&\").replace(optionalParam, \"(?:$1)?\").replace(namedParam, function(match, optional) {\n        return optional ? match : \"([^\\\\s]+)\";\n    }).replace(splatParam, \"(.*?)\").replace(optionalRegex, \"\\\\s*$1?\\\\s*\");\n    return new RegExp(\"^\" + command + \"$\", \"i\");\n}; // this is from https://github.com/aceakash/string-similarity\nexports.commandToRegExp = commandToRegExp;\nvar compareTwoStringsUsingDiceCoefficient = function compareTwoStringsUsingDiceCoefficient(first, second) {\n    first = first.replace(/\\s+/g, \"\").toLowerCase();\n    second = second.replace(/\\s+/g, \"\").toLowerCase();\n    if (!first.length && !second.length) return 1; // if both are empty strings\n    if (!first.length || !second.length) return 0; // if only one is empty string\n    if (first === second) return 1; // identical\n    if (first.length === 1 && second.length === 1) return 0; // both are 1-letter strings\n    if (first.length < 2 || second.length < 2) return 0; // if either is a 1-letter string\n    var firstBigrams = new Map();\n    for(var i = 0; i < first.length - 1; i++){\n        var bigram = first.substring(i, i + 2);\n        var count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;\n        firstBigrams.set(bigram, count);\n    }\n    var intersectionSize = 0;\n    for(var _i = 0; _i < second.length - 1; _i++){\n        var _bigram = second.substring(_i, _i + 2);\n        var _count = firstBigrams.has(_bigram) ? firstBigrams.get(_bigram) : 0;\n        if (_count > 0) {\n            firstBigrams.set(_bigram, _count - 1);\n            intersectionSize++;\n        }\n    }\n    return 2.0 * intersectionSize / (first.length + second.length - 2);\n};\nexports.compareTwoStringsUsingDiceCoefficient = compareTwoStringsUsingDiceCoefficient;\nvar browserSupportsPolyfills = function browserSupportsPolyfills() {\n    return  false && (0);\n};\nexports.browserSupportsPolyfills = browserSupportsPolyfills;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/lib/utils.js\n");

/***/ })

};
;